{%- set license_classifiers = {
    'MIT': 'License :: OSI Approved :: MIT License',
    'BSD-3-Clause': 'License :: OSI Approved :: BSD License',
    'ISC': 'License :: OSI Approved :: ISC License (ISCL)',
    'Apache-2.0': 'License :: OSI Approved :: Apache Software License',
    'GPL-3.0-only': 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'
} -%}
[tool]
[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "Top-level package for {{ cookiecutter.project_name }}."
authors = ["{{ cookiecutter.full_name.replace('\"', '\\\"') }} <{{ cookiecutter.email }}>"]
readme = "README.rst"
{%- if cookiecutter.open_source_license in license_classifiers %}
license =  "{{ cookiecutter.open_source_license }}"
{%- endif %}
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
{%- if cookiecutter.open_source_license in license_classifiers %}
    '{{ license_classifiers[cookiecutter.open_source_license] }}',
{%- endif %}
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
packages = [
    { include = "{{ cookiecutter.project_slug }}" },
    { include = "tests", format = "sdist" },
]

[[tool.poetry.source]]
name = "gel_pypi"
url = "{{ cookiecutter.pypi_url }}"

[tool.poetry.dependencies]
python = "*"

[tool.poetry.dev-dependencies]
bumpversion = "*"
coverage = "*"
flake8 = "*"
flake8-bugbear = "*"
invoke = "*"
isort = "*"
{% if cookiecutter.use_mypy == 'y' -%}
mypy = "*"
{% endif -%}
{% if cookiecutter.use_pylint == 'y' -%}
pylint = "*"
{% endif -%}
pytest = "*"
sphinx = "*"
tox = "*"
types-requests = "*"

[tool.pytest.ini_options]
minversion = "6.0"
filterwarnings = "ignore::DeprecationWarning"

[tool.black]
line-length = {{ cookiecutter.line_length }}

[tool.isort]
profile = "black"

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]
skip_empty = true

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py3.9, py3.10

[testenv]
description = Run compliance tests
whitelist_externals = poetry
setenv =
    PIP_EXTRA_INDEX_URL = {{ cookiecutter.pypi_url }}
require_locked_deps = true
install_dev_deps = true
commands =
    poetry run invoke format --check
    poetry run invoke lint
    poetry run invoke test --junit --coverage="xml"
"""

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
